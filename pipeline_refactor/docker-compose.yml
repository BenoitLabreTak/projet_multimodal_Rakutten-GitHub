services:
  zenml-server:
    image: zenmldocker/zenml-server:0.82.1
    ports:
      - "8080:8080"
    environment:
      - ZENML_STORE_URL=mysql://root:${MYSQL_ROOT_PASSWORD}@host.docker.internal/zenml
      - ZENML_SERVER_AUTO_ACTIVATE=true
      - ZENML_DEFAULT_USER_NAME=$ZENML_USERNAME
      - ZENML_DEFAULT_USER_PASSWORD=$ZENML_PASSWORD
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - db
      - s3
    networks:
      - front-tier
      - back-tier
  db:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE=zenml
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - back-tier
  s3:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    #command: server /data
    command: [ "server", "--address", "0.0.0.0:9000", "--console-address", "0.0.0.0:9001", "/data" ]
    ports:
      - "9000:9000" # indispensable pour lancer des pipelines de l'extérieur
      - "9001:9001" # pas indispensable
    environment:
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
      - MINIO_DEFAULT_BUCKETS=zenml-bucket
    volumes:
      - s3_data:/data
    networks:
      - front-tier
      - back-tier

  pipeline:
    build:
      context: .
      dockerfile: docker/Dockerfile
    #command: ["run-first-time.sh"]
    environment:
      - ZENML_STORE_URL=http://zenml-server:8080
      - ZENML_STORE_USERNAME=$ZENML_USERNAME
      - ZENML_STORE_PASSWORD=$ZENML_PASSWORD
      - MINIO_SERVER_URL=http://s3:9000
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
      - MINIO_DEFAULT_BUCKETS=zenml-bucket
      # nécessaire pour reconnaitre pipeline comme un module python
      - PYTHONPATH=. 
      #- ZENML_STORE_API_KEY= A définir ou voir script run-apikey.sh
    volumes:
      - ../data/text:/app/datasets
      - ../data/images:/app/images
      - ../models:/app/models
      # pour permettre docker in docker
      - /var/run/docker.sock:/var/run/docker.sock
      # pour le dev: à retirer pour la prod
      - ./pipelines:/app/pipelines
      - ./utils:/app/utils
    networks:
      - front-tier

volumes:
  db_data:
  s3_data:

networks:
  front-tier:
  back-tier: