name: FastAPI + Pytest Integration

on:
  push:
    branches: [ "fabrice_unittests" ]
  pull_request:
    branches: [ "fabrice_unittests" ]

jobs:
  integration-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run pytest 
        run: pytest -rA --tb=short

  docker-build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: docker compose build

      - name: Normalize branch name
        id: vars
        run: |
          BRANCH="${GITHUB_REF_NAME}"
          # Minuscule, remplace / et autres caractères spéciaux par -
          SAFE_BRANCH=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed 's#[^a-z0-9]#-#g')
          SAFE_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]' | sed 's#[^a-z0-9]#-#g')
          SAFE_REPOSITORY=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]' | sed 's#[^a-z0-9]#-#g')
          IMAGE_NAME=ghcr.io/$SAFE_OWNER/$SAFE_REPOSITORY/app:$SAFE_BRANCH
          echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Tag Docker image
        run: |
          
          docker tag projet_multimodal_rakutten-github-app:latest ${{ steps.vars.outputs.image_name }}

      - name: Push Docker image
        run: |
          docker push ${{ steps.vars.outputs.image_name }}

  retrain:
    #needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        #TODO: récupérer dynamiquement IMAGE_NAME
      - name: Run container and call /train/retrain/text
        run: |
          echo "IMAGE_NAME=ghcr.io/benoitlabretak/benoitlabretak-projet-multimodal-rakutten-github/app:fabrice-unittests" > githubaction.env
          docker compose --env-file githubaction.env up -d --quiet-pull

          # Wait for the API to be up
          for i in {1..30}; do
            if curl -s http://localhost:8000/docs; then
              echo "API is up!"
              break
            fi
            echo "Waiting for API..."
            sleep 2
          done

          # Call the endpoint
          curl -X 'POST' http://localhost:8000/train/retrain/text?epochs=1&batch_size=8 -d ''

          # Stop the container
          docker compose down